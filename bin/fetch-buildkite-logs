#!/bin/bash

# Default values
PIPELINE=""
BUILD_NUMBER=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -p|--pipeline)
            PIPELINE="$2"
            shift 2
            ;;
        -b|--build|--build-number)
            BUILD_NUMBER="$2"
            shift 2
            ;;
        -h|--help)
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Fetch and clean Buildkite build logs"
            echo ""
            echo "Options:"
            echo "  -p, --pipeline PIPELINE        Pipeline name (required)"
            echo "  -b, --build, --build-number N  Build number (required)"
            echo "  -h, --help                     Show this help message"
            echo ""
            echo "Example:"
            echo "  $0 -p world-flow -b 12337"
            echo "  $0 --pipeline world-flow --build-number 12337"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use -h or --help for usage information"
            exit 1
            ;;
    esac
done

# Check required parameters
if [ -z "$PIPELINE" ]; then
    echo "Error: Pipeline name is required. Use -p or --pipeline"
    exit 1
fi

if [ -z "$BUILD_NUMBER" ]; then
    echo "Error: Build number is required. Use -b, --build, or --build-number"
    exit 1
fi

# Execute the command pipeline
echo "Fetching logs for pipeline: $PIPELINE, build: $BUILD_NUMBER..." >&2

mcp call buildkite-mcp get_build_job_logs \
    --pipeline "$PIPELINE" \
    --build_number "$BUILD_NUMBER" | \
jq '.[] | .text' | \
sed 's/\\n/\n/g' | \
sed 's/\\r//g' | \
sed 's/\\u001b\[0m\\//g' | \
sed 's/\\\\u001b_bk;t=.*\\\\u0007\\\\u001b//g' | \
sed 's/\\\\u001b_bk;t=.*\\\\u0007//g'