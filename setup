# symlink up dotfiles
echo '  ======  installing dotfiles via dfm'
~/dotfiles/bin/dfm install
echo '  ======  installed dotfiles via dfm'

# zsh-specific things
echo '  ======  installing zsh plugins'
mkdir -p ~/.config/zsh
# install zsh plugins
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.config/zsh/zsh-syntax-highlighting
if ! grep -q "source ~/.config/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ${ZDOTDIR:-$HOME}/.zshrc; then
        echo "source ~/.config/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" >> ${ZDOTDIR:-$HOME}/.zshrc
fi
echo '  ======  installed zsh plugins'

# install tmux helpers
echo '  ======  installing tmux plugins'
mkdir -p ~/.tmux/plugins
git clone https://github.com/laktak/extrakto ~/.tmux/plugins/extrakto
if ! grep -q "run-shell ~/.tmux/plugins/extrakto/extrakto.tmux" ~/.tmux.conf; then
        echo "run-shell ~/.tmux/plugins/extrakto/extrakto.tmux" >> ~/.tmux.conf
fi
echo '  ======  installed tmux plugins'

# neovim-specific things
echo '  ======  installing neovim plugins'
mkdir -p ~/.local/share/nvim/site/pack/git-plugins/start
# install neovim plugins
git clone --depth 1 https://github.com/dense-analysis/ale.git ~/.local/share/nvim/site/pack/git-plugins/start/ale
git clone https://github.com/tpope/vim-fugitive.git ~/.local/share/nvim/site/pack/git-plugins/start/vim-fugitive
git clone https://github.com/tpope/vim-surround.git ~/.local/share/nvim/site/pack/git-plugins/start/vim-surround
git clone https://github.com/tpope/vim-repeat.git ~/.local/share/nvim/site/pack/git-plugins/start/vim-repeat
git clone https://github.com/airblade/vim-gitgutter.git ~/.local/share/nvim/site/pack/git-plugins/start/vim-gitgutter
git clone https://github.com/ruanyl/vim-gh-line.git ~/.local/share/nvim/site/pack/git-plugins/start/vim-gh-line
git clone https://github.com/kana/vim-textobj-user.git ~/.local/share/nvim/site/pack/git-plugins/start/vim-textobj-user
git clone https://github.com/tek/vim-textobj-ruby.git ~/.local/share/nvim/site/pack/git-plugins/start/vim-textobj-ruby
git clone https://github.com/thiagoalessio/rainbow_levels.vim.git ~/.local/share/nvim/site/pack/git-plugins/start/rainbow_levels.vim
git clone https://github.com/jiangmiao/auto-pairs.git ~/.local/share/nvim/site/pack/git-plugins/start/auto-pairs
git clone https://github.com/folke/zen-mode.nvim.git ~/.local/share/nvim/site/pack/git-plugins/start/zen-mode.nvim
git clone https://github.com/github/copilot.vim.git ~/.local/share/nvim/site/pack/git-plugins/start/copilot.vim
echo '  ======  installed neovim plugins'

__setup_ubuntu(){
        if [ "$(dpkg --print-architecture)" = "amd64" ]; then
                echo "Ubuntu detected"
                sudo apt-get install -y ripgrep fzf exuberant-ctags xsel
                if ! grep -q "source /usr/share/doc/fzf/examples/fzf.vim" ~/.vimrc; then
                        echo "source /usr/share/doc/fzf/examples/fzf.vim" >> ~/.vimrc
                fi
                if ! grep -q "source /usr/share/doc/fzf/examples/fzf.vim" ~/.config/nvim/init.vim; then
                        echo "source /usr/share/doc/fzf/examples/fzf.vim" >> ~/.config/nvim/init.vim
                fi
        else
                echo "Ubuntu detected, but not amd64"
                __setup_unsupported
        fi
}

__setup_linux(){
        echo "Detected Linux!"
        echo "Checking distro..."
        if (uname -a | grep -qi "Microsoft"); then
    OS="ubuntuwsl"
  elif ! command -v lsb_release &> /dev/null; then
    echo "lsb_release could not be found. Falling back to /etc/os-release"
    OS="$(grep -Po '(?<=^ID=).*$' /etc/os-release | tr '[:upper:]' '[:lower:]')" 2>/dev/null
  else
    OS=$(lsb_release -i | awk '{ print $3 }' | tr '[:upper:]' '[:lower:]')
  fi
        case "$OS" in
                "ubuntu" | "ubuntuwsl" | "debian" | "linuxmint" | "parrot" | "kali" | "elementary" | "pop")
                        __setup_ubuntu;;
                *)
                        __setup_unsupported;;
        esac
}

__setup_mac(){
        echo "Detected Mac!"

        if command -v brew &> /dev/null
        then
                echo "Refreshing your brew"
                brew update && brew upgrade && brew cleanup
                echo "Installing with brew"
                brew install tmux neovim tree tig ripgrep fzf bat gh ctags
                brew install raycast --cask
                brew install shortcat --cask
        else
                echo "Could not find brew"
        fi

}

__setup_unsupported(){
        echo "  ======  Unknown or unsupported OS or architecture"
}

case "$OSTYPE" in
  linux*)         __setup_linux ;;
  darwin*)        __setup_mac ;;
  *)              __setup_unsupported ;;
esac
